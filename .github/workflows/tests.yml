name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ads_stat
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_ads_stat
        SECRET_KEY: test_secret_key
        TELEGRAM_BOT_TOKEN: test_token
        GOOGLE_CLIENT_ID: test_client_id
        GOOGLE_CLIENT_SECRET: test_client_secret
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Временно отключаем frontend тесты
  # frontend-tests:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #       cache-dependency-path: frontend/package-lock.json
  #   
  #   - name: Install frontend dependencies
  #     working-directory: ./frontend
  #     run: npm ci
  #   
  #   - name: Run frontend tests
  #     working-directory: ./frontend
  #     run: npm test -- --coverage
  #   
  #   - name: Upload frontend coverage to Codecov
  #     uses: codecov/codecov-action@v3
  #     with:
  #       file: ./frontend/coverage/lcov.info
  #       flags: frontend
  #       name: frontend-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ads_stat_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_ads_stat_integration
        SECRET_KEY: test_secret_key
        TELEGRAM_BOT_TOKEN: test_token
        GOOGLE_CLIENT_ID: test_client_id
        GOOGLE_CLIENT_SECRET: test_client_secret
      run: |
        pytest tests/test_integration.py -v -m integration

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

#  linting:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.11'
#        cache: 'pip'
#    - name: Install linting tools
#      run: |
#        pip install flake8 black isort mypy
#    - name: Run linting checks
#      run: |
#        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
#        black --check app/ tests/
#        isort --check-only app/ tests/
#        mypy app/ --ignore-missing-imports
#    - name: Set up Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version: '18'
#        cache: 'npm'
#        cache-dependency-path: frontend/package-lock.json
#    - name: Install frontend dependencies
#      working-directory: ./frontend
#      run: npm ci
#    - name: Run frontend linting
#      working-directory: ./frontend
#      run: npm run lint

  build-test:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test Docker images
      run: |
        docker build -t ads-stat-backend .

  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "Some tests failed. Check the workflow for details."
        # Здесь можно добавить уведомления в Slack, Telegram или email 