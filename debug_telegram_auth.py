#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram
"""

import os
import sys
import hmac
import hashlib
import json
from urllib.parse import parse_qs, unquote

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.config import settings

def debug_telegram_auth():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram"""
    
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
    test_init_data = "user=%7B%22id%22%3A5583588138%2C%22first_name%22%3A%22Senoro%22%2C%22last_name%22%3A%22Pomodoro%22%2C%22username%22%3A%22senoropomodoro%22%2C%22language_code%22%3A%22ru%22%2C%22allows_write_to_pm%22%3Atrue%2C%22photo_url%22%3A%22https%3A%5C%2F%5C%2Ft.me%5C%2Fi%5C%2Fuserpic%5C%2F320%5C%2F8IDMs2EzSGrsZcnWwXho31zG22pwaa7YeQj2e_sd81YWRyFZGdFAiODkBSVsxiZH.svg%22%7D&chat_instance=4655770683956331623&chat_type=private&auth_date=1751313796&signature=26pfzpu5xMkR8LJ7xDl9zeAlj-TLoksxAEmPl-mJLdziOAhFs2kKdLTaN62B_pQ7ibDHk3YIgPtdzWNhoeCdAQ&hash=90fdb9585451090036b8c4effbb3c02eb6316f5c04f12775510c51f6a9e3a89c"
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_init_data}")
    print()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å—Ç—Ä–æ–∫—É
    decoded_data = unquote(test_init_data)
    print(f"üìä –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {decoded_data}")
    print()
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = parse_qs(decoded_data)
    print(f"üìä –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    for key, values in params.items():
        print(f"   {key}: {values[0] if values else 'None'}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    data_dict = {}
    for key, values in params.items():
        if values:
            data_dict[key] = values[0]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º hash
    received_hash = data_dict.pop('hash', '') or ''
    print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π hash: {received_hash}")
    print()
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    for key, value in data_dict.items():
        print(f"   {key}: {value}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ hash –∏ signature)
    fields_to_exclude = ['hash', 'signature']
    data_check_string = '\n'.join([
        f"{k}={v}" for k, v in sorted(data_dict.items())
        if k not in fields_to_exclude
    ])
    
    print(f"üìä –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"'{data_check_string}'")
    print()
    
    print(f"üìä –ë–∞–π—Ç—ã —Å—Ç—Ä–æ–∫–∏: {data_check_string.encode('utf-8')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {settings.TELEGRAM_BOT_TOKEN}")
    print(f"üîë –ë–∞–π—Ç—ã —Ç–æ–∫–µ–Ω–∞: {settings.TELEGRAM_BOT_TOKEN.encode('utf-8')}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = hmac.new(
        "WebAppData".encode('utf-8'),
        settings.TELEGRAM_BOT_TOKEN.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    print(f"üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (hex): {secret_key.hex()}")
    print()
    
    # –í—ã—á–∏—Å–ª—è–µ–º hash
    computed_hash = hmac.new(
        secret_key,
        data_check_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    print(f"üìä –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hash: {computed_hash}")
    print(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–π hash: {received_hash}")
    print(f"üìä –•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {computed_hash == received_hash}")
    print()
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
    print("-" * 40)
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ–∑ "WebAppData" –∫–ª—é—á–∞
    try:
        secret_key_v1 = hmac.new(
            settings.TELEGRAM_BOT_TOKEN.encode('utf-8'),
            data_check_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        print(f"–í–∞—Ä–∏–∞–Ω—Ç 1 (–±–µ–∑ WebAppData): {secret_key_v1}")
        print(f"–°–æ–≤–ø–∞–¥–∞–µ—Ç: {secret_key_v1 == received_hash}")
    except Exception as e:
        print(f"–í–∞—Ä–∏–∞–Ω—Ç 1 –æ—à–∏–±–∫–∞: {e}")
    print()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä—è–º–æ–µ SHA256
    try:
        hash_v2 = hashlib.sha256(data_check_string.encode('utf-8')).hexdigest()
        print(f"–í–∞—Ä–∏–∞–Ω—Ç 2 (SHA256): {hash_v2}")
        print(f"–°–æ–≤–ø–∞–¥–∞–µ—Ç: {hash_v2 == received_hash}")
    except Exception as e:
        print(f"–í–∞—Ä–∏–∞–Ω—Ç 2 –æ—à–∏–±–∫–∞: {e}")
    print()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: HMAC —Å —Ç–æ–∫–µ–Ω–æ–º –∫–∞–∫ –∫–ª—é—á–æ–º
    try:
        hash_v3 = hmac.new(
            settings.TELEGRAM_BOT_TOKEN.encode('utf-8'),
            data_check_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        print(f"–í–∞—Ä–∏–∞–Ω—Ç 3 (HMAC —Å —Ç–æ–∫–µ–Ω–æ–º): {hash_v3}")
        print(f"–°–æ–≤–ø–∞–¥–∞–µ—Ç: {hash_v3 == received_hash}")
    except Exception as e:
        print(f"–í–∞—Ä–∏–∞–Ω—Ç 3 –æ—à–∏–±–∫–∞: {e}")
    print()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π:")
    print("-" * 30)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    sorted_fields = sorted([k for k in data_dict.keys() if k not in fields_to_exclude])
    print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è: {sorted_fields}")
    
    for field in sorted_fields:
        print(f"   {field}: {data_dict[field]}")
    print()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 30)
    
    try:
        user_data = json.loads(data_dict['user'])
        print(f"–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON: {json.dumps(user_data, indent=2, ensure_ascii=False)}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å JSON –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        user_data_clean = json.dumps(user_data, separators=(',', ':'), ensure_ascii=False)
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π JSON: {user_data_clean}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ—á–∏—â–µ–Ω–Ω—ã–º JSON
        data_dict_clean = data_dict.copy()
        data_dict_clean['user'] = user_data_clean
        
        data_check_string_clean = '\n'.join([
            f"{k}={v}" for k, v in sorted(data_dict_clean.items())
            if k not in fields_to_exclude
        ])
        
        print(f"–û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {data_check_string_clean}")
        
        computed_hash_clean = hmac.new(
            secret_key,
            data_check_string_clean.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        print(f"Hash —Å –æ—á–∏—â–µ–Ω–Ω—ã–º JSON: {computed_hash_clean}")
        print(f"–°–æ–≤–ø–∞–¥–∞–µ—Ç: {computed_hash_clean == received_hash}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å JSON: {e}")
    
    print()
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ BotFather")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ Mini App")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Mini App –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
    print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")

if __name__ == "__main__":
    debug_telegram_auth() 