import axios from 'axios'
import { API_BASE_URL, API_ROUTES } from '../config'

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token')
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  console.log('DEBUG: Axios request:', {
    url: config.url,
    method: config.method,
    data: config.data,
    headers: config.headers
  })
  return config
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  (response) => {
    console.log('DEBUG: Axios response:', {
      status: response.status,
      data: response.data
    })
    return response
  },
  (error) => {
    console.error('DEBUG: Axios error:', {
      status: error.response?.status,
      data: error.response?.data,
      message: error.message
    })
    return Promise.reject(error)
  }
)

export interface TelegramAuthData {
  id: number
  first_name: string
  last_name?: string
  username?: string
  photo_url?: string
  auth_date: number
  hash: string
}

export interface TelegramWebAppAuthData {
  initData: string
}

export interface AuthResponse {
  access_token: string
  token_type: string
  user: {
    id: number
    telegram_id: string
    username: string
    first_name: string
    last_name: string
    email?: string
    has_google_sheet: boolean
  }
}

export interface UserProfile {
  id: number
  telegram_id: string
  username: string
  first_name: string
  last_name: string
  email?: string
  has_google_sheet: boolean
  created_at: string
}

export const authService = {
  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  _authInProgress: false,
  _authPromise: null as Promise<AuthResponse> | null,

  async telegramAuth(data: TelegramAuthData): Promise<AuthResponse> {
    console.log('üîç authService.telegramAuth: –ù–∞—á–∏–Ω–∞–µ–º LEGACY –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
    console.log('üì§ authService.telegramAuth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', data)
    console.log('üåê authService.telegramAuth: URL:', `${API_BASE_URL}/api/auth/telegram`)
    
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this._authInProgress && this._authPromise) {
      console.log('‚ö†Ô∏è authService.telegramAuth: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π')
      return this._authPromise
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    this._authInProgress = true
    this._authPromise = this._performTelegramAuth(data)
    
    try {
      const result = await this._authPromise
      return result
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this._authInProgress = false
      this._authPromise = null
    }
  },

  async telegramWebAppAuth(data: TelegramWebAppAuthData): Promise<AuthResponse> {
    console.log('üîç authService.telegramWebAppAuth: –ù–∞—á–∏–Ω–∞–µ–º WEBAPP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
    console.log('üì§ authService.telegramWebAppAuth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initData:', data.initData)
    console.log('üåê authService.telegramWebAppAuth: URL:', `${API_BASE_URL}/api/auth/web-app/auth/telegram`)
    
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this._authInProgress && this._authPromise) {
      console.log('‚ö†Ô∏è authService.telegramWebAppAuth: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π')
      return this._authPromise
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    this._authInProgress = true
    this._authPromise = this._performTelegramWebAppAuth(data)
    
    try {
      const result = await this._authPromise
      return result
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this._authInProgress = false
      this._authPromise = null
    }
  },

  async _performTelegramAuth(data: TelegramAuthData): Promise<AuthResponse> {
    const maxRetries = 3
    const baseDelay = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const response = await api.post(API_ROUTES.AUTH_TELEGRAM, data)
        console.log('‚úÖ authService.telegramAuth: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.data)
        return response.data
      } catch (error: any) {
        console.error(`‚ùå authService.telegramAuth: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} - –û—à–∏–±–∫–∞:`, error)
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ 429 (Too Many Requests), –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (error.response?.status === 429 && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt - 1) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          console.log(`‚è≥ authService.telegramAuth: –û–∂–∏–¥–∞–µ–º ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`)
          await new Promise(resolve => setTimeout(resolve, delay))
          continue
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        throw error
      }
    }
    
    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
  },

  async _performTelegramWebAppAuth(data: TelegramWebAppAuthData): Promise<AuthResponse> {
    const maxRetries = 3
    const baseDelay = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const response = await api.post(API_ROUTES.AUTH_WEBAPP_TELEGRAM, data)
        console.log('‚úÖ authService.telegramWebAppAuth: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.data)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (response.data.success) {
          return {
            access_token: response.data.access_token,
            token_type: response.data.token_type,
            user: response.data.user_data
          }
        } else {
          throw new Error(response.data.error || '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å')
        }
      } catch (error: any) {
        console.error(`‚ùå authService.telegramWebAppAuth: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} - –û—à–∏–±–∫–∞:`, error)
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ 429 (Too Many Requests), –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (error.response?.status === 429 && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt - 1) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          console.log(`‚è≥ authService.telegramWebAppAuth: –û–∂–∏–¥–∞–µ–º ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`)
          await new Promise(resolve => setTimeout(resolve, delay))
          continue
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        throw error
      }
    }
    
    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
  },

  async getProfile(token: string): Promise<UserProfile> {
    console.log('üîç authService.getProfile: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å')
    const response = await api.get(API_ROUTES.USER_PROFILE, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    console.log('‚úÖ authService.getProfile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', response.data)
    return response.data
  },

  async updateProfile(email: string): Promise<{ message: string; user: Partial<UserProfile> }> {
    const response = await api.put(API_ROUTES.USER_PROFILE, { email })
    return response.data
  },

  async getGoogleAuthUrl(): Promise<{ auth_url: string }> {
    const response = await api.post(API_ROUTES.AUTH_GOOGLE_URL)
    return response.data
  },

  async googleAuthCallback(code: string): Promise<{ message: string }> {
    const token = localStorage.getItem('token')
    const response = await api.post(API_ROUTES.AUTH_GOOGLE_CALLBACK, { code }, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    // –ï—Å–ª–∏ –±—ç–∫ –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π access_token, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if (response.data.access_token) {
      localStorage.setItem('token', response.data.access_token)
      // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
    return response.data
  },

  async getGoogleSpreadsheets(): Promise<{ spreadsheets: { id: string, name: string }[] }> {
    const response = await api.get(API_ROUTES.AUTH_GOOGLE_SPREADSHEETS)
    return response.data
  },

  async getVkAuthUrl(): Promise<{ auth_url: string }> {
    const response = await api.post(API_ROUTES.AUTH_VK_URL)
    return response.data
  },

  async vkAuthCallback(code: string): Promise<{ message: string }> {
    const token = localStorage.getItem('token')
    const response = await api.post(API_ROUTES.AUTH_VK_CALLBACK, { code }, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    if (response.data.access_token) {
      localStorage.setItem('token', response.data.access_token)
    }
    return response.data
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  (window as any).authService = authService
} 