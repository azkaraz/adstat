import React from 'react'
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { AuthProvider, useAuth } from './contexts/AuthContext'
import Navbar from './components/Navbar'
import Login from './pages/Login'
import Dashboard from './pages/Dashboard'
import Profile from './pages/Profile'
import Upload from './pages/Upload'
import TestAuth from './pages/TestAuth'
import DebugInfo from './components/DebugInfo'
import './App.css'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è GitHub Pages
const basename = import.meta.env.MODE === 'production' ? '/adstat' : '/'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const TelegramAuthInitializer = () => {
  const { login, user, loading } = useAuth()
  const [hasAttemptedAuth, setHasAttemptedAuth] = React.useState(false)

  React.useEffect(() => {
    const initTelegramAuth = async () => {
      console.log('üîç TelegramAuthInitializer: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é')
      console.log('üîç TelegramAuthInitializer: user =', user)
      console.log('üîç TelegramAuthInitializer: loading =', loading)
      console.log('üîç TelegramAuthInitializer: hasAttemptedAuth =', hasAttemptedAuth)
      console.log('üîç TelegramAuthInitializer: window.Telegram =', window.Telegram)
      console.log('üîç TelegramAuthInitializer: window.Telegram?.WebApp =', window.Telegram?.WebApp)
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (hasAttemptedAuth || user || loading) {
        console.log('‚ùå TelegramAuthInitializer: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é - —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')
        return
      }
      
      // –ï—Å–ª–∏ Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ URL, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!window.Telegram?.WebApp && window.location.hash.includes('tgWebAppData')) {
        console.log('üîß TelegramAuthInitializer: –°–æ–∑–¥–∞–µ–º Telegram WebApp –∏–∑ URL –¥–∞–Ω–Ω—ã—Ö')
        
        const urlData = new URLSearchParams(window.location.hash.substring(1))
        const tgWebAppData = urlData.get('tgWebAppData')
        
        if (tgWebAppData) {
          try {
            const decoded = decodeURIComponent(tgWebAppData)
            const params = new URLSearchParams(decoded)
            
            const userStr = params.get('user')
            const user = userStr ? JSON.parse(userStr) : null
            
            window.Telegram = {
              WebApp: {
                initData: decoded,
                initDataUnsafe: {
                  user: user
                },
                platform: urlData.get('tgWebAppPlatform') || '',
                version: urlData.get('tgWebAppVersion') || '',
                ready: () => console.log('‚úÖ Telegram WebApp ready'),
                expand: () => console.log('‚úÖ Telegram WebApp expanded'),
                close: () => {},
                isExpanded: false,
                viewportHeight: 0,
                viewportStableHeight: 0,
                headerColor: '',
                backgroundColor: '',
                themeParams: {},
                colorScheme: 'light',
                isClosingConfirmationEnabled: false,
                BackButton: {
                  isVisible: false,
                  text: '',
                  show: () => {},
                  hide: () => {},
                  onClick: () => {},
                  offClick: () => {}
                },
                MainButton: {
                  text: '',
                  color: '',
                  textColor: '',
                  isVisible: false,
                  isProgressVisible: false,
                  isActive: false,
                  show: () => {},
                  hide: () => {},
                  enable: () => {},
                  disable: () => {},
                  showProgress: () => {},
                  hideProgress: () => {},
                  onClick: () => {},
                  offClick: () => {}
                },
                HapticFeedback: {
                  impactOccurred: () => {},
                  notificationOccurred: () => {},
                  selectionChanged: () => {}
                },
                CloudStorage: {
                  getItem: async () => null,
                  setItem: async () => {},
                  getItems: async () => ({}),
                  removeItem: async () => {},
                  removeItems: async () => {}
                },
                showAlert: () => {},
                showConfirm: () => {},
                showPopup: () => {},
                showScanQrPopup: () => {},
                closeScanQrPopup: () => {},
                readTextFromClipboard: () => {},
                requestWriteAccess: () => {},
                requestContact: () => {},
                invokeCustomMethod: () => {},
                switchInlineQuery: () => {},
                openLink: () => {},
                openTelegramLink: () => {},
                openInvoice: () => {},
                setHeaderColor: () => {},
                setBackgroundColor: () => {},
                enableClosingConfirmation: () => {},
                disableClosingConfirmation: () => {},
                onEvent: () => {},
                offEvent: () => {},
                sendData: () => {},
                isVersionAtLeast: () => false
              }
            }
            
            console.log('‚úÖ TelegramAuthInitializer: Telegram WebApp —Å–æ–∑–¥–∞–Ω –∏–∑ URL:', window.Telegram.WebApp)
          } catch (error) {
            console.error('‚ùå TelegramAuthInitializer: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram WebApp:', error)
          }
        }
      }
      
      if (window.Telegram?.WebApp && !user && !loading && !hasAttemptedAuth) {
        console.log('‚úÖ TelegramAuthInitializer: Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω')
        const tg = window.Telegram.WebApp
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
        tg.ready()
        tg.expand()
        
        console.log('‚úÖ TelegramAuthInitializer: WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        console.log('üìä TelegramAuthInitializer: initDataUnsafe =', tg.initDataUnsafe)
        console.log('üìä TelegramAuthInitializer: initData =', tg.initData)
        console.log('üìä TelegramAuthInitializer: platform =', tg.platform)
        console.log('üìä TelegramAuthInitializer: version =', tg.version)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram
        if (tg.initDataUnsafe?.user) {
          console.log('‚úÖ TelegramAuthInitializer: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã')
          
          // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞
          setHasAttemptedAuth(true)
          
          try {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º initData –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            const telegramData = {
              id: tg.initDataUnsafe.user.id,
              first_name: tg.initDataUnsafe.user.first_name,
              last_name: tg.initDataUnsafe.user.last_name || '',
              username: tg.initDataUnsafe.user.username || '',
              photo_url: tg.initDataUnsafe.user.photo_url || '',
              auth_date: Math.floor(Date.now() / 1000), // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
              hash: tg.initData // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç Telegram
            }
            
            console.log('üì§ TelegramAuthInitializer: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', telegramData)
            await login(telegramData)
            console.log('‚úÖ TelegramAuthInitializer: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
          } catch (error) {
            console.error('‚ùå TelegramAuthInitializer: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            setHasAttemptedAuth(false)
            // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, 
            // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤—Ä—É—á–Ω—É—é
          }
        } else {
          console.log('‚ö†Ô∏è TelegramAuthInitializer: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
          console.log('üìä TelegramAuthInitializer: –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            initData: tg.initData,
            initDataUnsafe: tg.initDataUnsafe,
            platform: tg.platform,
            version: tg.version
          })
          // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
          setHasAttemptedAuth(true)
        }
      } else {
        console.log('‚ùå TelegramAuthInitializer: Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        console.log('üìä TelegramAuthInitializer: –ü—Ä–∏—á–∏–Ω—ã:', {
          hasTelegram: !!window.Telegram,
          hasWebApp: !!window.Telegram?.WebApp,
          userExists: !!user,
          isLoading: loading,
          hasAttempted: hasAttemptedAuth
        })
      }
    }

    initTelegramAuth()
  }, []) // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  return <></>
}

function App() {
  return (
    <AuthProvider>
      <TelegramAuthInitializer />
      <Router basename={basename}>
        <div className="min-h-screen bg-gray-50">
          <Navbar />
          <main className="container mx-auto px-4 py-8">
            <Routes>
              <Route path="/" element={<Dashboard />} />
              <Route path="/login" element={<Login />} />
              <Route path="/profile" element={<Profile />} />
              <Route path="/upload" element={<Upload />} />
              <Route path="/test" element={<TestAuth />} />
            </Routes>
          </main>
          <DebugInfo />
        </div>
      </Router>
    </AuthProvider>
  )
}

export default App 