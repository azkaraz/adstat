import React, { useState } from 'react'
import { authService } from '../services/authService'

const TestTelegramWebApp: React.FC = () => {
  const [initData, setInitData] = useState('')
  const [result, setResult] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string>('')

  const handleTest = async () => {
    if (!initData.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ initData')
      return
    }

    setLoading(true)
    setError('')
    setResult(null)

    try {
      const response = await authService.telegramWebAppAuth({ initData })
      setResult(response)
      console.log('‚úÖ WebApp auth successful:', response)
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      console.error('‚ùå WebApp auth failed:', err)
    } finally {
      setLoading(false)
    }
  }

  const handleGetFromTelegram = () => {
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp
      setInitData(tg.initData || '')
      console.log('üìä Telegram WebApp data:', {
        initData: tg.initData,
        initDataUnsafe: tg.initDataUnsafe,
        platform: tg.platform,
        version: tg.version
      })
    } else {
      setError('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }
  }

  const handleTestWithMockData = () => {
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ initData
    const mockInitData = 'user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22User%22%2C%22username%22%3A%22testuser%22%7D&auth_date=1234567890&hash=mock_hash'
    setInitData(mockInitData)
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">–¢–µ—Å—Ç Telegram WebApp Auth</h1>
      
      <div className="bg-gray-100 p-6 rounded-lg mb-6">
        <h2 className="text-xl font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram WebApp</h2>
        <div className="space-y-2">
          <p><strong>Telegram –¥–æ—Å—Ç—É–ø–µ–Ω:</strong> {window.Telegram ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
          <p><strong>WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:</strong> {window.Telegram?.WebApp ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
          {window.Telegram?.WebApp && (
            <>
              <p><strong>Platform:</strong> {window.Telegram.WebApp.platform}</p>
              <p><strong>Version:</strong> {window.Telegram.WebApp.version}</p>
              <p><strong>initData:</strong> {window.Telegram.WebApp.initData || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
              <p><strong>initDataUnsafe:</strong> {JSON.stringify(window.Telegram.WebApp.initDataUnsafe, null, 2)}</p>
            </>
          )}
        </div>
      </div>

      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
        
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            initData:
          </label>
          <textarea
            value={initData}
            onChange={(e) => setInitData(e.target.value)}
            className="w-full h-32 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="–í–≤–µ–¥–∏—Ç–µ initData —Å—Ç—Ä–æ–∫—É..."
          />
        </div>

        <div className="flex flex-wrap gap-2 mb-4">
          <button
            onClick={handleGetFromTelegram}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            –ü–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram
          </button>
          <button
            onClick={handleTestWithMockData}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
          >
            –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          </button>
          <button
            onClick={handleTest}
            disabled={loading}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
        </div>

        {error && (
          <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </div>
        )}

        {result && (
          <div className="p-4 bg-green-100 border border-green-400 text-green-700 rounded">
            <h3 className="font-semibold mb-2">‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</h3>
            <pre className="text-sm overflow-auto">
              {JSON.stringify(result, null, 2)}
            </pre>
          </div>
        )}
      </div>

      <div className="mt-6 bg-yellow-100 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
        <ol className="list-decimal list-inside space-y-1 text-sm">
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram WebApp</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</li>
          <li>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ initData –≤—Ä—É—á–Ω—É—é</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</li>
        </ol>
      </div>
    </div>
  )
}

export default TestTelegramWebApp 